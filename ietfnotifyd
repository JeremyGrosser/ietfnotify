#!/usr/bin/python
# -*- python -*-
# ietfnotify - Receives, archives, and sends notifications related to IETF
#              events, drafts, working groups, etc.
# Copyright (C) 2006 Jeremy Grosser
# See LICENSE file in the root of the source distribution for details

"""
NAME
        ietfnotifyd - Receive, and sends notifications related to IETF documents.

SYNOPSIS
        ietfnotifyd [OPTIONS]

DESCRIPTION
        ietfnotify consists of a daemon (ietfnotifyd) and a web interface
        which together provide a notification distribution service. It has
        been built for the purpose of distributing notifications of events
        related to IETF documents, but is fairly generic and could easily be
        adapted to other contexts.

OPTIONS
        -d, --foreground Run in foreground, do not detach
        -D, --debug      Log debug information
        -h, --help       Show this help, then exit
        -v, --version    Show program version, then exit

AUTHOR
        Written by Jeremy Grosser, <synack@csh.rit.edu>

COPYRIGHT
        Copyright 2006 Jeremy Grosser.

        This program is free software; you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation; either version 2 of the License, or (at
        your option) any later version. There is NO WARRANTY; not even the
        implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
        PURPOSE. See the GNU General Public License for more details.
"""


import time
import os, sys, getopt

# The full module must be loaded first to run init code
import ietfnotify.config
import ietfnotify.log
from ietfnotify.log import info, warn, err, debug

daemon = True
opts, args = getopt.getopt(sys.argv, 'dDhv', ["foreground", "debug", "help", "version"])
for arg in args:
    if arg in ['-d', '--foreground' ]:	daemon = False
    if arg in ['-D', '--debug' ]:	ietfnotify.log.debugMode = True
    if arg in ['-h', '--help' ]:
        print __doc__
        sys.exit(0)
    if arg in ['-v', '--version' ]:
        print 'ietfnotifyd 0.11 ($Id$)'
        sys.exit(0)

import signal
import traceback
from socket import timeout

import ietfnotify.network
import ietfnotify.util
import ietfnotify.notifier
import ietfnotify.message
import ietfnotify.archive

def main():
    # Build a uuid cache for feeds
    ietfnotify.archive.buildUUIDCache()

    # Start a new listening socket
    sd = ietfnotify.network.startServer()

    # Create a buffer for incoming events
    buffer = []

    inc = int(ietfnotify.config.get('general', 'accepttimeout'))
    target = time.time() + inc

    info("Starting up notifcation daemon. Listening on %s:%s." % (ietfnotify.config.get('general', 'bindaddr'), ietfnotify.config.getint('general', 'bindport')))


    try:
        while True:
            try:
                newtimeout = max( target - time.time(), 0.1)
                sd.settimeout(newtimeout)
                #debug('timeout(' + str(newtimeout) + ')\tbuffer(' + str(len(buffer)) + ')')

                try:
                    afd, address = sd.accept()
                except timeout:
                    #debug('target(' + str(target) + ')\ttime.now(' + str(time.time()) + ')')
                    if len(buffer) > 0:
                        msg = buffer.pop()
                        ietfnotify.notifier.sendNotifications(msg)
                        ietfnotify.message.updateFilters(msg)
                    target += inc
                    continue

                msg = ietfnotify.network.getMessage(afd)
                msg = ietfnotify.message.parseMessage(msg, 1)
                retnum, retmsg = ietfnotify.message.checkRequired(msg)
                if not retnum:
                    if len(buffer) > int(ietfnotify.config.get('general', 'eventbuffer')):
                        retnum = 1
                        retmsg = 'Buffer full'
                    else:
                        buffer.append(msg)
                if not retnum:
                    retnum, retmsg = ietfnotify.archive.archiveMessage(msg)
                if not retnum:
                    ietfnotify.network.sendMessage(afd, 'OK-' + retmsg + '\n')
                    msg['event-uuid'] = [retmsg]
                else:
                    ietfnotify.network.sendMessage(afd, 'ERR-' + retmsg + '\n')
                afd.close()
            except KeyboardInterrupt:
                raise
            except SystemExit:
                raise
            except Exception, e:
                for line in traceback.format_exception(sys.exc_type, sys.exc_value, sys.exc_traceback):
                    warn(line.rstrip())

    except KeyboardInterrupt:
        info('Caught keyboard interrupt, cleaning up.')
        ietfnotify.notifier.cleanup()
        sd.close()
    except SystemExit:
        ietfnotify.notifier.cleanup()
        sd.close()

# Fork if we're in daemon mode
if daemon:
    def exithandler(signum, frame):
        info('Received signal %s. Closing down notification daemon..' % (signum))
        ietfnotify.notifier.cleanup()
        sys.exit(0)

    sys.stdout = ietfnotify.log.LogStream("info")
    sys.stderr = ietfnotify.log.LogStream("error")

    signal.signal(signal.SIGTERM, exithandler)
    signal.signal(signal.SIGKILL, exithandler)

    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        print 'First fork failed: ' + e.strerror
        sys.exit(1)
        os.chdir('/')
        os.setsid()

    try:
        pid = os.fork()
        if pid > 0:
            debug('Forked to PID ' + str(pid))
            open(ietfnotify.config.get('general', 'pidfile'), 'w').write(str(pid))
            sys.exit(0)
    except OSError, e:
        print 'Second fork failed: ' + e.strerror
        sys.exit(1)

main()
